{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","webpack:///./src/images/svg/macbook.svg","webpack:///./src/pages/dtrader/_dtrader-video.js","webpack:///./node_modules/regenerator-runtime/runtime.js","webpack:///./node_modules/@babel/runtime/regenerator/index.js"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","_extends","Object","assign","target","i","length","source","prototype","hasOwnProperty","call","y","width","height","xlinkHref","Container","styled","section","device","tabletL","Tab","div","TabsWrapper","StepCommon","css","props","no_margin","Step","Header","start_time","current_time","end_time","VideoWrapper","mobileL","MacbookFrame","xmlns","xmlnsXlink","viewBox","Video","video","GoToLiveDemo","LinkButton","GotoLiveWrapper","DtraderTabs","my_ref","React","createRef","interval_ref","state","progress_percentage","transition","handler","is_ios","entries","a","isIntersecting","updatePlay","current","ontimeupdate","setState","currentTime","progressHandler","window","setInterval","pause","clearInterval","observer","isBrowser","IntersectionObserver","is_playing","play","console","log","clickHandler","time","Math","ceil","duration","componentDidMount","node","observe","test","navigator","userAgent","MSStream","componentWillUnmount","disconnect","componentDidUpdate","prev_props","prev_state","requestAnimationFrame","render","as","type","lh","align","onClick","localize","secondary","external","to","is_deriv_app_link","rel","ref","controls","preload","muted","playsinline","src","Component","runtime","exports","Op","hasOwn","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","defineProperty","enumerable","configurable","writable","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","method","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","makeInvokeMethod","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","invoke","result","__await","unwrapped","TypeError","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","iter","toString","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","Function"],"mappings":"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","file":"89-9f4d1d201be978c0cb7d.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nvar _ref = /*#__PURE__*/React.createElement(\"image\", {\n  y: 25,\n  width: 4083,\n  height: 2492,\n  xlinkHref: \"data:img/png;base64,\"\n});\n\nfunction SvgMacbook(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    viewBox: \"0 0 4083 2555\"\n  }, props), _ref);\n}\n\nexport default __webpack_public_path__ + \"static/macbook.46f575ab.svg\";\nexport { SvgMacbook as ReactComponent };","import React from 'react'\nimport styled, { css } from 'styled-components'\nimport { localize } from 'components/localization'\nimport { Header } from 'components/elements'\nimport { ReactComponent as Macbook } from 'images/svg/macbook.svg'\nimport device from 'themes/device.js'\nimport { isBrowser } from 'common/utility'\nimport { LinkButton } from 'components/form'\n\nconst Container = styled.section`\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: flex-start;\n    margin-top: 4rem;\n\n    @media ${device.tabletL} {\n        margin-top: 0;\n        flex-direction: column-reverse;\n        justify-content: center;\n    }\n`\nconst Tab = styled.div`\n    width: 100%;\n    margin-top: 2.4rem;\n`\nconst TabsWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    max-width: 38.4rem;\n    margin-top: 6rem;\n\n    div:first-child {\n        margin-top: 0;\n    }\n    @media ${device.tabletL} {\n        flex-direction: column;\n        justify-content: flex-start;\n        margin-top: 0;\n    }\n`\nconst StepCommon = css`\n    font-weight: 500;\n    cursor: pointer;\n    padding-left: 1.8rem;\n    @media ${device.tabletL} {\n        text-align: left;\n        border: none;\n        margin-top: ${(props) => (props.no_margin ? '0' : '2rem')};\n    }\n`\nconst Step = styled(Header)`\n    ${StepCommon}\n    margin-top: 0;\n    ${(props) =>\n        props.start_time < props.current_time && props.current_time < props.end_time\n            ? 'color: var(--color-black-3); border-left: 4px solid var(--color-red)'\n            : 'opacity: 0.2; border-left: 4px solid rgb(0, 0, 0, 0)'};\n    pointer-events: ${(props) =>\n        props.start_time < props.current_time && props.current_time < props.end_time\n            ? ' none;'\n            : ''};\n`\n\nconst VideoWrapper = styled.div`\n    position: relative;\n    width: 100%;\n    height: 49rem;\n\n    @media ${device.mobileL} {\n        height: 24rem;\n        margin-top: 2rem;\n    }\n`\nconst MacbookFrame = styled(Macbook)`\n    position: absolute;\n    width: 100%;\n    height: 100%;\n`\nconst Video = styled.video`\n    position: absolute;\n    width: 77%;\n    top: 5.5%;\n    height: 77%;\n    left: 11.5%;\n`\nconst GoToLiveDemo = styled(LinkButton)`\n    border: 2px solid var(--color-red);\n    font-weight: bold;\n    line-height: 1.43;\n    width: fit-content;\n\n    @media ${device.tabletL} {\n        max-width: 100%;\n        font-size: 1.75rem;\n    }\n`\nconst GotoLiveWrapper = styled.div`\n    margin-top: 4rem;\n\n    @media ${device.tabletL} {\n        margin: 4rem auto;\n    }\n`\nclass DtraderTabs extends React.Component {\n    my_ref = React.createRef()\n    interval_ref = undefined\n    state = {\n        current_time: 0,\n        progress_percentage: 0,\n        transition: true,\n        handler: 0,\n        is_ios: true,\n    }\n    handler = async (entries) => {\n        let entry\n        for (entry of entries) {\n            if (entry.isIntersecting) {\n                if (!this.state.is_ios) {\n                    this.updatePlay()\n                }\n\n                this.my_ref.current.ontimeupdate = () => {\n                    if (this.my_ref.current) {\n                        this.setState({\n                            current_time: this.my_ref.current.currentTime,\n                        })\n                    }\n                }\n                this.progressHandler()\n                this.interval_ref = window.setInterval(this.progressHandler, 300)\n            } else {\n                this.my_ref.current.pause()\n                window.clearInterval(this.interval_ref)\n            }\n        }\n    }\n    observer = isBrowser() && new IntersectionObserver(this.handler)\n    componentDidMount() {\n        const node = this.my_ref.current\n        this.updatePlay()\n        this.observer.observe(node)\n\n        const is_ios = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream\n\n        this.setState({ is_ios })\n    }\n    componentWillUnmount() {\n        window.clearInterval(this.interval_ref)\n        this.observer.disconnect()\n    }\n\n    updatePlay = async () => {\n        if (!this.my_ref.current.is_playing) {\n            try {\n                await this.my_ref.current.play()\n            } catch (err) {\n                // eslint-disable-next-line no-console\n                console.log(err)\n            }\n        }\n    }\n    componentDidUpdate(prev_props, prev_state) {\n        if (this.state.transition === false) {\n            requestAnimationFrame(() => {\n                this.setState({\n                    transition: true,\n                })\n            })\n        }\n        if (prev_state.handler !== this.state.handler) {\n            this.updatePlay()\n        }\n    }\n    clickHandler = (time) => {\n        this.my_ref.current.currentTime = time\n        this.my_ref.current.pause()\n        this.setState({ transition: false, handler: time })\n        this.progressHandler()\n    }\n    progressHandler = () => {\n        this.setState({\n            progress_percentage: Math.ceil(\n                (this.my_ref.current.currentTime * 100) / this.my_ref.current.duration,\n            ),\n        })\n    }\n    render() {\n        return (\n            <Container>\n                <TabsWrapper>\n                    <Tab>\n                        <Step\n                            as=\"h4\"\n                            type=\"sub-section-title\"\n                            lh=\"1.5\"\n                            align=\"left\"\n                            no_margin\n                            start_time={0}\n                            end_time={7}\n                            current_time={this.state.current_time}\n                            onClick={() => {\n                                this.clickHandler(0)\n                                this.updatePlay()\n                            }}\n                        >\n                            {localize('1. Select an asset')}\n                        </Step>\n                    </Tab>\n                    <Tab>\n                        <Step\n                            as=\"h4\"\n                            type=\"sub-section-title\"\n                            lh=\"1.5\"\n                            align=\"left\"\n                            start_time={7}\n                            end_time={13}\n                            current_time={this.state.current_time}\n                            onClick={() => {\n                                this.clickHandler(7)\n                                this.updatePlay()\n                            }}\n                        >\n                            {localize('2. Monitor the chart')}\n                        </Step>\n                    </Tab>\n                    <Tab>\n                        <Step\n                            as=\"h4\"\n                            type=\"sub-section-title\"\n                            lh=\"1.5\"\n                            align=\"left\"\n                            start_time={13}\n                            end_time={30}\n                            current_time={this.state.current_time}\n                            onClick={() => {\n                                this.clickHandler(13)\n                                this.updatePlay()\n                            }}\n                        >\n                            {localize('3. Place a trade')}\n                        </Step>\n                    </Tab>\n                    <GotoLiveWrapper>\n                        <GoToLiveDemo\n                            secondary=\"true\"\n                            external=\"true\"\n                            to=\"/\"\n                            is_deriv_app_link\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            {localize('Go to live demo')}\n                        </GoToLiveDemo>\n                    </GotoLiveWrapper>\n                </TabsWrapper>\n                <VideoWrapper>\n                    <MacbookFrame />\n                    <Video\n                        ref={this.my_ref}\n                        controls={this.state.is_ios}\n                        preload=\"metadata\"\n                        muted\n                        playsinline\n                    >\n                        <source src=\"/Dtrader_GIF.mp4\" type=\"video/mp4\" />\n                        <source src=\"/Dtrader_GIF.webm\" type=\"video/webm\" />\n                    </Video>\n                </VideoWrapper>\n            </Container>\n        )\n    }\n}\nexport default DtraderTabs\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","module.exports = require(\"regenerator-runtime\");\n"],"sourceRoot":""}