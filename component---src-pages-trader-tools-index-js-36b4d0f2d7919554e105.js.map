{"version":3,"sources":["webpack:///./src/pages/trader-tools/_underlying-data.js","webpack:///./src/pages/trader-tools/_style.js","webpack:///./src/pages/trader-tools/_validation.js","webpack:///./src/pages/trader-tools/_margin-calculator.js","webpack:///./src/pages/trader-tools/_swap-calculator.js","webpack:///./src/pages/trader-tools/index.js","webpack:///./src/images/common/trade-tools/trade-tools-bg.png"],"names":["optionItemDefault","name","display_name","key","icon","market","leverageItemLists","syntheticItemLists","localize","src","BOOM1000","alt","BOOM500","CRASH1000","CRASH500","RANGEBREAK100","RANGEBREAK200","STEPINDICES","HFVOL10","HFVOL50","HFVOL100","INDEX10S1","INDEX10","INDEX25S1","INDEX25","INDEX50S1","INDEX50","INDEX75S1","INDEX75","INDEX100S1","INDEX100","financialItemLists","DAX30","CLBRENT","BCHUSD","BTCUSD","DSHUSD","EOSUSD","LTCUSD","XRPUSD","AUDCAD","AUDCHF","AUDJPY","AUDNZD","AUDUSD","EURCAD","EURCHF","EURGBP","EURJPY","EURNZD","EURUSD","GBPCHF","GBPJPY","GBPUSD","NZDUSD","USDCAD","USDCHF","USDJPY","CADCHF","CADJPY","GBPAUD","GBPCAD","GBPNZD","NZDCAD","NZDJPY","USDZAR","CHFJPY","OILUSD","GOLDUSD","SILVERUSD","PALLADIUMUSD","PLATINUMUSD","StyledText","styled","Text","device","tabletL","StyledSection","SectionContainer","SectionHeader","Header","SectionSubtitle","tablet","SwapTabSelector","Flex","props","active","css","mobileL","ContentContainer","laptopM","FormWrapper","SwapFormWrapper","CalculatorForm","Form","CalculatorHeader","div","CalculatorLabel","label","CalculatorOutputContainer","CalculatorOutputField","CalculatorOutputSymbol","CalculatorBody","CalculatorTabItem","CalculatorDropdown","Dropdown","InputGroup","ActionSection","CalculateButton","Button","RightContent","RightContentHeader","TextWrapper","tabletM","ImageWrapper","laptop","FormulaText","StyledOl","ol","BottomContent","BottomText","laptopL","LinkWrapper","StyledLinkButton","LinkButton","validation_regex","number","numberWithNegative","integer","validation_is_exceed_number","input","maxDigit","max_digit","length","validation_is_not_zero","numberValidation","fieldName","test","translate_text","values","validation","symbol","volume","assetPrice","leverage","swapRate","numberWithNegativeValidation","pointValue","MarginCalculator","data","useStaticQuery","useState","tab","setTab","onTabClick","toFixed","val","parseFloat","toLocaleString","numberSubmitFormat","replace","direction","as","align","mt","mb","weight","enableReinitialize","initialValues","accountType","margin","marginSymbol","optionList","contractSize","validate","errors","symbol_error","volume_error","assetPrice_error","leverage_error","onSubmit","setFieldValue","margin_formula","getMargin","setFieldError","setFieldTouched","handleBlur","touched","setErrors","resetForm","isValid","dirty","htmlFor","toString","jc","height","onClick","disabled","option_list","default_option","selected_option","id","onChange","value","currency","slice","getContractSize","error","onBlur","autocomplete","field","type","autoComplete","handleError","current_input","focus","maxLength","background","data-lpignore","secondary","components","Desktop","Mobile","margin_formula_mobile","tertiary","to","external","target","StyledInputGroup","StyledActionSection","SwapCalculator","getCurrencySwap","numberWithCommas","numberSubmitFormatNegative","result","charAt","p","size","swapCharge","swapChargeSymbol","swapRate_error","swap_formula_synthetic","getSwapChargeSynthetic","swap_synthetic_formula","swap_synthetic_formula_mobile","pointValue_error","getSwapChargeForex","max_width","swap_forex_formula","swap_forex_formula_mobile","Hero","Patterns","Separator","Item","active_tab","useTabState","React","setActiveTab","WithIntl","useEffect","getLocationHash","isBrowser","window","history","pushState","scrollTop","handleTabChange","tab_name","title","description","ai","color","pt","position","module","exports"],"mappings":"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","file":"component---src-pages-trader-tools-index-js-36b4d0f2d7919554e105.js","sourcesContent":["import React from 'react'\nimport {\n    INDEX10,\n    INDEX25,\n    INDEX50,\n    INDEX75,\n    INDEX100,\n    INDEX10S1,\n    INDEX100S1,\n    INDEX25S1,\n    INDEX50S1,\n    INDEX75S1,\n    RANGEBREAK100,\n    RANGEBREAK200,\n    STEPINDICES,\n    AUDCAD,\n    AUDCHF,\n    AUDNZD,\n    AUDJPY,\n    AUDUSD,\n    BCHUSD,\n    BTCUSD,\n    CADCHF,\n    CADJPY,\n    CLBRENT,\n    DAX30,\n    DSHUSD,\n    EOSUSD,\n    EURNZD,\n    GBPCAD,\n    GBPCHF,\n    GBPNZD,\n    HFVOL10,\n    HFVOL50,\n    HFVOL100,\n    LTCUSD,\n    NZDCAD,\n    USDZAR,\n    NZDJPY,\n    GOLDUSD,\n    PALLADIUMUSD,\n    PLATINUMUSD,\n    SILVERUSD,\n    OILUSD,\n    EURCAD,\n    EURCHF,\n    EURGBP,\n    EURJPY,\n    EURUSD,\n    GBPAUD,\n    GBPJPY,\n    GBPUSD,\n    USDCAD,\n    USDCHF,\n    USDJPY,\n    BOOM500,\n    BOOM1000,\n    CRASH500,\n    CRASH1000,\n    CHFJPY,\n    NZDUSD,\n    XRPUSD,\n} from 'components/elements/symbols.js'\nimport { localize } from 'components/localization'\n\nexport const optionItemDefault = {\n    name: 'default',\n    display_name: '',\n    key: '14',\n    icon: '',\n    market: '',\n}\n\nexport const optionLeverageDefault = {\n    name: 'value',\n    display_name: '',\n    key: '14',\n    icon: '',\n    market: '',\n}\n\nexport const leverageItemLists = [\n    { name: 4000, display_name: 4000, key: '1', icon: '' },\n    { name: 3500, display_name: 3500, key: '2', icon: '' },\n    { name: 3000, display_name: 3000, key: '3', icon: '' },\n    { name: 2500, display_name: 2500, key: '4', icon: '' },\n    { name: 2000, display_name: 2000, key: '5', icon: '' },\n    { name: 1500, display_name: 1500, key: '6', icon: '' },\n    { name: 1000, display_name: 1000, key: '7', icon: '' },\n    { name: 900, display_name: 900, key: '8', icon: '' },\n    { name: 800, display_name: 800, key: '9', icon: '' },\n    { name: 700, display_name: 700, key: '10', icon: '' },\n    { name: 600, display_name: 600, key: '11', icon: '' },\n    { name: 500, display_name: 500, key: '12', icon: '' },\n    { name: 400, display_name: 400, key: '13', icon: '' },\n    { name: 200, display_name: 200, key: '14', icon: '' },\n    { name: 100, display_name: 100, key: '15', icon: '' },\n    { name: 50, display_name: 50, key: '16', icon: '' },\n    { name: 30, display_name: 30, key: '17', icon: '' },\n    { name: 5, display_name: 5, key: '18', icon: '' },\n]\n\nexport const syntheticItemLists = [\n    {\n        name: 'Boom 1000 Index',\n        display_name: localize('Boom 1000 Index'),\n        icon: <img src={BOOM1000} alt=\"boom 100\" />,\n        market: 'synthetic_indices',\n    },\n    {\n        name: 'Boom 500 Index',\n        display_name: localize('Boom 500 Index'),\n        icon: <img src={BOOM500} alt=\"boom 500\" />,\n        market: 'synthetic_indices',\n    },\n    {\n        name: 'Crash 1000 Index',\n        display_name: localize('Crash 1000 Index'),\n        icon: <img src={CRASH1000} alt=\"crash 1000\" />,\n        market: 'synthetic_indices',\n    },\n    {\n        name: 'Crash 500 Index',\n        display_name: localize('Crash 500 Index'),\n        icon: <img src={CRASH500} alt=\"crash 500\" />,\n        market: 'synthetic_indices',\n    },\n    {\n        name: 'Range Break 100 Index',\n        display_name: localize('Range Break 100 Index'),\n        icon: <img src={RANGEBREAK100} alt=\"\" />,\n        market: 'synthetic_indices',\n    },\n    {\n        name: 'Range Break 200 Index',\n        display_name: localize('Range Break 200 Index'),\n        icon: <img src={RANGEBREAK200} alt=\"range break 200\" />,\n        market: 'synthetic_indices',\n    },\n    {\n        name: 'Step Index',\n        display_name: localize('Step Index'),\n        icon: <img src={STEPINDICES} alt=\"step index\" />,\n        market: 'synthetic_indices',\n    },\n    {\n        name: 'HF Volatility 10 Index',\n        display_name: localize('HF Volatility 10 Index'),\n        icon: <img src={HFVOL10} alt=\"hf vol 10\" />,\n        market: 'synthetic_indices',\n    },\n    {\n        name: 'HF Volatility 50 Index',\n        display_name: localize('HF Volatility 50 Index'),\n        icon: <img src={HFVOL50} alt=\"hf vol 50\" />,\n        market: 'synthetic_indices',\n    },\n    {\n        name: 'HF Volatility 100 Index',\n        display_name: localize('HF Volatility 100 Index'),\n        icon: <img src={HFVOL100} alt=\"hf vol 100\" />,\n        market: 'synthetic_indices',\n    },\n    {\n        name: 'Volatility 10 (1s) Index',\n        display_name: localize('Volatility 10 (1s) Index'),\n        icon: <img src={INDEX10S1} alt=\"vol 10 1s\" />,\n        market: 'synthetic_indices',\n    },\n    {\n        name: 'Volatility 10 Index',\n        display_name: localize('Volatility 10 Index'),\n        icon: <img src={INDEX10} alt=\"vol 10\" />,\n        market: 'synthetic_indices',\n    },\n    {\n        name: 'Volatility 25 (1s) Index',\n        display_name: localize('Volatility 25 (1s) Index'),\n        icon: <img src={INDEX25S1} alt=\"vol 25 1s\" />,\n        market: 'synthetic_indices',\n    },\n    {\n        name: 'Volatility 25 Index',\n        display_name: localize('Volatility 25 Index'),\n        icon: <img src={INDEX25} alt=\"\" />,\n        market: 'synthetic_indices',\n    },\n    {\n        name: 'Volatility 50 (1s) Index',\n        display_name: localize('Volatility 50 (1s) Index'),\n        icon: <img src={INDEX50S1} alt=\"vol 50 1s\" />,\n        market: 'synthetic_indices',\n    },\n    {\n        name: 'Volatility 50 Index',\n        display_name: localize('Volatility 50 Index'),\n        icon: <img src={INDEX50} alt=\"vol 50\" />,\n        market: 'synthetic_indices',\n    },\n    {\n        name: 'Volatility 75 (1s) Index',\n        display_name: localize('Volatility 75 (1s) Index'),\n        icon: <img src={INDEX75S1} alt=\"vol 75 1s\" />,\n        market: 'synthetic_indices',\n    },\n    {\n        name: 'Volatility 75 Index',\n        display_name: localize('Volatility 75 Index'),\n        icon: <img src={INDEX75} alt=\"vol 75\" />,\n        market: 'synthetic_indices',\n    },\n    {\n        name: 'Volatility 100 (1s) Index',\n        display_name: localize('Volatility 100 (1s) Index'),\n        icon: <img src={INDEX100S1} alt=\"vol 100 1s\" />,\n        market: 'synthetic_indices',\n    },\n    {\n        name: 'Volatility 100 Index',\n        display_name: localize('Volatility 100 Index'),\n        icon: <img src={INDEX100} alt=\"vol 100\" />,\n        market: 'synthetic_indices',\n    },\n]\n\nexport const financialItemLists = [\n    {\n        name: 'DAX_30',\n        display_name: localize('DAX_30'),\n        icon: <img src={DAX30} alt=\"dax 30\" />,\n        market: 'other',\n    },\n    {\n        name: 'CL_BRENT',\n        display_name: localize('CL_BRENT'),\n        icon: <img src={CLBRENT} alt=\"cl brent\" />,\n        market: 'other',\n    },\n    {\n        name: 'BCHUSD',\n        display_name: localize('BCH/USD'),\n        icon: <img src={BCHUSD} alt=\"bch usd\" />,\n        market: 'forex',\n    },\n    {\n        name: 'BTCUSD',\n        display_name: localize('BTC/USD'),\n        icon: <img src={BTCUSD} alt=\"btc usd\" />,\n        market: 'forex',\n    },\n    {\n        name: 'DSHUSD',\n        display_name: localize('DSH/USD'),\n        icon: <img src={DSHUSD} alt=\"dsh usd\" />,\n        market: 'forex',\n    },\n    {\n        name: 'EOSUSD',\n        display_name: localize('EOS/USD'),\n        icon: <img src={EOSUSD} alt=\"eos usd\" />,\n        market: 'forex',\n    },\n    {\n        name: 'LTCUSD',\n        display_name: localize('LTC/USD'),\n        icon: <img src={LTCUSD} alt=\"ltc usd\" />,\n        market: 'forex',\n    },\n    {\n        name: 'XRPUSD',\n        display_name: localize('XRP/USD'),\n        icon: <img src={XRPUSD} alt=\"xrp usd\" />,\n        market: 'forex',\n    },\n    {\n        name: 'AUDCAD',\n        display_name: localize('AUD/CAD'),\n        icon: <img src={AUDCAD} alt=\"aud cad\" />,\n        market: 'forex',\n    },\n    {\n        name: 'AUDCHF',\n        display_name: localize('AUD/CHF'),\n        icon: <img src={AUDCHF} alt=\"aud chf\" />,\n        market: 'forex',\n    },\n    {\n        name: 'AUDJPY',\n        display_name: localize('AUD/JPY'),\n        icon: <img src={AUDJPY} alt=\"aud jpy\" />,\n        market: 'forex',\n    },\n    {\n        name: 'AUDNZD',\n        display_name: localize('AUD/NZD'),\n        icon: <img src={AUDNZD} alt=\"aud nzd\" />,\n        market: 'forex',\n    },\n    {\n        name: 'AUDUSD',\n        display_name: localize('AUD/USD'),\n        icon: <img src={AUDUSD} alt=\"aud usd\" />,\n        market: 'forex',\n    },\n    {\n        name: 'EURCAD',\n        display_name: localize('EUR/CAD'),\n        icon: <img src={EURCAD} alt=\"eur cad\" />,\n        market: 'forex',\n    },\n    {\n        name: 'EURCHF',\n        display_name: localize('EUR/CHF'),\n        icon: <img src={EURCHF} alt=\"eur chf\" />,\n        market: 'forex',\n    },\n    {\n        name: 'EURGBP',\n        display_name: localize('EUR/GBP'),\n        icon: <img src={EURGBP} alt=\"eur gbp\" />,\n        market: 'forex',\n    },\n    {\n        name: 'EURJPY',\n        display_name: localize('EUR/JPY'),\n        icon: <img src={EURJPY} alt=\"eur jpy\" />,\n        market: 'forex',\n    },\n    {\n        name: 'EURNZD',\n        display_name: localize('EUR/NZD'),\n        icon: <img src={EURNZD} alt=\"eur nzd\" />,\n        market: 'forex',\n    },\n    {\n        name: 'EURUSD',\n        display_name: localize('EUR/USD'),\n        icon: <img src={EURUSD} alt=\"eur usd\" />,\n        market: 'forex',\n    },\n    {\n        name: 'GBPCHF',\n        display_name: localize('GBP/CHF'),\n        icon: <img src={GBPCHF} alt=\"gbp chf\" />,\n        market: 'forex',\n    },\n    {\n        name: 'GBPJPY',\n        display_name: localize('GBP/JPY'),\n        icon: <img src={GBPJPY} alt=\"gbp jpy\" />,\n        market: 'forex',\n    },\n    {\n        name: 'GBPUSD',\n        display_name: localize('GBP/USD'),\n        icon: <img src={GBPUSD} alt=\"gbp usd\" />,\n        market: 'forex',\n    },\n    {\n        name: 'NZDUSD',\n        display_name: localize('NZD/USD'),\n        icon: <img src={NZDUSD} alt=\"nzd usd\" />,\n        market: 'forex',\n    },\n    {\n        name: 'USDCAD',\n        display_name: localize('USD/CAD'),\n        icon: <img src={USDCAD} alt=\"usd cad\" />,\n        market: 'forex',\n    },\n    {\n        name: 'USDCHF',\n        display_name: localize('USD/CHF'),\n        icon: <img src={USDCHF} alt=\"usd chf\" />,\n        market: 'forex',\n    },\n    {\n        name: 'USDJPY',\n        display_name: localize('USD/JPY'),\n        icon: <img src={USDJPY} alt=\"usd jpy\" />,\n        market: 'forex',\n    },\n    {\n        name: 'CADCHF',\n        display_name: localize('CAD/CHF'),\n        icon: <img src={CADCHF} alt=\"cad chf\" />,\n        market: 'forex',\n    },\n    {\n        name: 'CADJPY',\n        display_name: localize('CAD/JPY'),\n        icon: <img src={CADJPY} alt=\"cad jpy\" />,\n        market: 'forex',\n    },\n    {\n        name: 'GBPAUD',\n        display_name: localize('GBP/AUD'),\n        icon: <img src={GBPAUD} alt=\"gbp aud\" />,\n        market: 'forex',\n    },\n    {\n        name: 'GBPCAD',\n        display_name: localize('GBP/CAD'),\n        icon: <img src={GBPCAD} alt=\"gbp cad\" />,\n        market: 'forex',\n    },\n    {\n        name: 'GBPNZD',\n        display_name: localize('GBP/NZD'),\n        icon: <img src={GBPNZD} alt=\"gbp nzd\" />,\n        market: 'forex',\n    },\n    {\n        name: 'NZDCAD',\n        display_name: localize('NZD/CAD'),\n        icon: <img src={NZDCAD} alt=\"nzd cad\" />,\n        market: 'forex',\n    },\n    {\n        name: 'NZDJPY',\n        display_name: localize('NZD/JPY'),\n        icon: <img src={NZDJPY} alt=\"nzd jpy\" />,\n        market: 'forex',\n    },\n    {\n        name: 'USDZAR',\n        display_name: localize('USD/ZAR'),\n        icon: <img src={USDZAR} alt=\"usd zar\" />,\n        market: 'forex',\n    },\n    {\n        name: 'CHFJPY',\n        display_name: localize('CHF/JPY'),\n        icon: <img src={CHFJPY} alt=\"chf  jpy\" />,\n        market: 'forex',\n    },\n    {\n        name: 'WTI_OIL',\n        display_name: localize('Oil/USD'),\n        icon: <img src={OILUSD} alt=\"oil usd\" />,\n        market: 'commodities',\n    },\n    {\n        name: 'XAUUSD',\n        display_name: localize('Gold/USD'),\n        icon: <img src={GOLDUSD} alt=\"gold usd\" />,\n        market: 'commodities',\n    },\n    {\n        name: 'XAGUSD',\n        display_name: localize('Silver/USD'),\n        icon: <img src={SILVERUSD} alt=\"silver usd\" />,\n        market: 'commodities',\n    },\n    {\n        name: 'XPDUSD',\n        display_name: localize('Palladium/USD'),\n        icon: <img src={PALLADIUMUSD} alt=\"palladium usd\" />,\n        market: 'commodities',\n    },\n    {\n        name: 'XPTUSD',\n        display_name: localize('Platinum/USD'),\n        icon: <img src={PLATINUMUSD} alt=\"platinum usd\" />,\n        market: 'commodities',\n    },\n]\n","import styled, { css } from 'styled-components'\nimport { Form } from 'formik'\nimport { Flex, SectionContainer } from 'components/containers'\nimport { Header, Text, Dropdown } from 'components/elements'\nimport { Button, LinkButton } from 'components/form'\nimport device from 'themes/device'\n\nexport const StyledText = styled(Text)`\n    @media ${device.tabletL} {\n        font-size: 16px;\n    }\n`\n\nexport const StyledSection = styled(SectionContainer)`\n    position: relative;\n    padding: 3rem 0;\n`\n\nexport const SectionHeader = styled(Header)`\n    @media ${device.tabletL} {\n        font-size: 32px;\n    }\n`\n\nexport const SectionSubtitle = styled(Text)`\n    width: 79.2rem;\n    margin: auto;\n    margin-bottom: 4rem;\n    font-size: 16px;\n    @media ${device.tablet} {\n        width: unset;\n        padding: 0 16px;\n    }\n`\n\nexport const SwapTabSelector = styled(Flex)`\n    padding: 2.4rem 4rem;\n    width: 35rem;\n    height: 8.4rem;\n    border-radius: 4px;\n    border: solid 1px rgba(51, 51, 51, 0.1);\n    justify-content: center;\n    flex-direction: column;\n    cursor: pointer;\n    ${(props) =>\n        props.active\n            ? css`\n                  box-shadow: 0 16px 20px 0 rgba(0, 0, 0, 0.05), 0 0 20px 0 rgba(0, 0, 0, 0.05);\n                  border: unset;\n                  ${Text} {\n                      font-weight: bold;\n                  }\n              `\n            : css`\n                  box-shadow: unset;\n                  ${Text} {\n                      font-weight: unset;\n                  }\n              `}\n\n    @media ${device.mobileL} {\n        width: 164px;\n        padding: 12px 24px;\n    }\n`\n\nexport const ContentContainer = styled(Flex)`\n    @media ${device.laptopM} {\n        flex-direction: column;\n    }\n`\n\nexport const FormWrapper = styled(Flex)`\n    margin-right: 4.8rem;\n    max-height: 705px;\n    width: unset;\n\n    @media ${device.laptopM} {\n        padding: 0 16px;\n        margin-bottom: 6rem;\n        margin-right: 0;\n    }\n`\nexport const SwapFormWrapper = styled(FormWrapper)`\n    height: 569px;\n    margin-top: 45px;\n    @media ${device.tabletL} {\n        height: unset;\n        margin-top: 0;\n    }\n`\n\nexport const CalculatorForm = styled(Form)`\n    background-color: #ffffff;\n    border-radius: 10px;\n    box-sizing: border-box;\n    box-shadow: 0 16px 20px 0 rgba(0, 0, 0, 0.05), 0 0 20px 0 rgba(0, 0, 0, 0.05);\n    width: 48.6rem;\n\n    @media ${device.mobileL} {\n        width: 328px;\n        margin-bottom: 20px;\n    }\n`\n\nexport const CalculatorHeader = styled.div`\n    border-radius: 8px 8px 0 0;\n    padding: 2.4rem;\n    background-color: var(--color-blue-4);\n`\n\nexport const CalculatorLabel = styled.label`\n    font-size: var(--text-size-xs);\n    font-weight: 300;\n    display: block;\n    margin-bottom: 1.4rem;\n\n    @media ${device.mobileL} {\n        font-size: 14px;\n    }\n`\n\nexport const CalculatorOutputContainer = styled(Flex)`\n    position: relative;\n    border-radius: 5px;\n    box-sizing: border-box;\n    height: 7.5rem;\n    border: 1.5px solid var(--color-blue-5);\n    background-color: white;\n`\n\nexport const CalculatorOutputField = styled(Flex)`\n    width: 80%;\n    white-space: nowrap;\n    resize: none;\n    background-color: white;\n    justify-content: flex-start;\n    height: 95%;\n    border: 0;\n    padding: 2.2rem;\n    font-size: 2.4rem;\n    font-weight: 500;\n    color: var(--color-blue-5);\n    overflow-x: auto;\n    overflow-y: hidden;\n    -webkit-text-fill-color: var(--color-blue-5);\n    opacity: 1;\n    -webkit-opacity: 1;\n    margin: 1px;\n\n    @media ${device.tabletL} {\n        font-size: 18px;\n    }\n\n    @media ${device.mobileL} {\n        padding-top: 2.4rem;\n        font-size: 16px;\n    }\n\n    &::-webkit-scrollbar {\n        width: 0;\n        background: transparent; /* Chrome/Safari/Webkit */\n    }\n\n    scrollbar-width: none; /* Firefox */\n    -ms-overflow-style: none; /* IE 10+ */\n`\n\nexport const CalculatorOutputSymbol = styled.label`\n    margin: 1px;\n    pointer-events: none;\n    color: var(--color-blue-5);\n    font-weight: bold;\n    font-size: 2.4rem;\n    padding: 2.2rem;\n    @media ${device.tabletL} {\n        font-size: 18px;\n    }\n\n    @media ${device.mobileL} {\n        font-size: 16px;\n        padding-top: 2.4rem;\n    }\n`\n\nexport const CalculatorBody = styled.div`\n    padding: 2.4rem;\n    /* stylelint-disable property-no-vendor-prefix */\n    ul::-webkit-scrollbar {\n        width: 12px;\n    }\n    ul::-webkit-scrollbar-thumb {\n        border: 4px solid rgba(0, 0, 0, 0);\n        background-clip: padding-box;\n        -webkit-border-radius: 7px;\n        border-radius: 7px;\n        background-color: var(--color-grey-32);\n        -webkit-box-shadow: inset -1px -1px 0 rgba(0, 0, 0, 0.05),\n            inset 1px 1px 0 rgba(0, 0, 0, 0.05);\n        box-shadow: inset -1px -1px 0 rgba(0, 0, 0, 0.05), inset 1px 1px 0 rgba(0, 0, 0, 0.05);\n    }\n    ul::-webkit-scrollbar-corner {\n        background-color: transparent;\n    }\n`\n\nexport const CalculatorTabItem = styled.div`\n    height: 72px;\n    width: 21rem;\n    border-radius: 1rem;\n    padding: 2rem;\n    border: solid 1px rgba(51, 51, 51, 0.1);\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    cursor: pointer;\n    ${(props) =>\n        props.active\n            ? css`\n                  pointer-events: none;\n                  border: 1.5px solid var(--color-blue-5);\n                  ${Text} {\n                      font-weight: bold;\n                  }\n              `\n            : css`\n                  box-shadow: unset;\n                  ${Text} {\n                      font-weight: unset;\n                  }\n              `}\n\n    @media ${device.mobileL} {\n        width: 140px;\n    }\n\n    ${StyledText} {\n        @media ${device.mobileL} {\n            font-size: 14px;\n        }\n    }\n`\n\nexport const CalculatorDropdown = styled(Dropdown)`\n    margin-bottom: 3.6rem;\n`\n\nexport const InputGroup = styled.div`\n    position: relative;\n    width: 100%;\n    margin: 2.4rem 0;\n`\n\nexport const ActionSection = styled(Flex)`\n    margin-top: 3rem;\n    justify-content: center;\n`\n\nexport const SwapActionSection = styled(Flex)`\n    padding: 0 2rem 2rem 2rem;\n    justify-content: center;\n`\n\nexport const CalculateButton = styled(Button)`\n    width: 100%;\n\n    @media ${device.mobileL} {\n        font-size: 14px;\n    }\n`\n\nexport const RightContent = styled.div`\n    display: block;\n    max-width: 69rem;\n    margin: 0;\n    @media ${device.laptopM} {\n        margin: auto;\n    }\n`\n\nexport const RightContentHeader = styled(Header)`\n    line-height: 1.25;\n    @media ${device.mobileL} {\n        font-size: 24px;\n    }\n`\n\nexport const TextWrapper = styled.div`\n    @media ${device.tabletM} {\n        padding: 0 16px;\n    }\n`\n\nexport const ImageWrapper = styled.div`\n    padding-left: 16px;\n    max-width: 650px;\n\n    @media ${device.laptop} {\n        padding-left: 0;\n    }\n`\n\nexport const FormulaText = styled.div`\n    background-color: #f9fafc;\n    padding: 1.6rem;\n    font-size: 14px;\n    line-height: 2;\n`\n\nexport const StyledOl = styled.ol`\n    list-style: decimal;\n    font-weight: bold;\n    margin-left: 20px;\n\n    span {\n        font-weight: 300;\n    }\n`\n\nexport const BottomContent = styled(Flex)`\n    max-width: 100%;\n    align-items: center;\n    margin-bottom: 7.2rem;\n    font-size: 1.6rem;\n    text-align: center;\n    padding: 0 16px;\n`\n\nexport const BottomText = styled(StyledText)`\n    width: 120rem;\n\n    @media ${device.laptopL} {\n        width: auto;\n    }\n\n    @media ${device.tabletL} {\n        font-size: 16px;\n    }\n`\n\n// export const RightContentHeaderP = styled.div`\n//     font-size: 16px;\n//     font-weight: normal;\n//     font-stretch: normal;\n//     font-style: normal;\n//     line-height: 1.5;\n//     letter-spacing: normal;\n//     text-align: center;\n//     color: #333333;\n//     margin-bottom: 40px;\n\n//     @media ${device.mobileL} {\n//         margin-bottom: 16px;\n//     }\n// `\n\nexport const LinkWrapper = styled(Flex)`\n    padding: 2rem 2rem 1rem;\n    width: 100%;\n    justify-content: center;\n\n    @media (max-width: 1420px) {\n        top: 480px;\n    }\n    @media ${device.laptop} {\n        top: 350px;\n        flex-direction: column-reverse;\n    }\n    @media ${device.tabletL} {\n        top: 236px;\n    }\n    @media ${device.tablet} {\n        position: unset;\n        top: unset;\n        justify-content: start;\n        margin-top: 12.8px;\n        padding: 0;\n    }\n`\n\nexport const StyledLinkButton = styled(LinkButton)`\n    padding: 1.2rem 1.5rem;\n    font-size: 14px;\n    max-height: 4rem;\n    height: 100%;\n    margin-right: 0.8rem;\n\n    @media ${device.laptop} {\n        padding: 1.5rem 1.6rem;\n        height: 42px;\n        white-space: nowrap;\n        display: block;\n        max-height: 40px;\n\n        :nth-child(2) {\n            margin-bottom: 16px;\n        }\n    }\n\n    :active {\n        outline: none;\n        border: none;\n    }\n    :focus {\n        outline: 0;\n    }\n`\n","import React from 'react'\nimport { localize, Localize } from 'components/localization'\n\nconst validation_regex = {\n    number: /^\\d*\\.?\\d+$/,\n    numberWithNegative: /^-?\\d*\\.{0,1}\\d+$/,\n    integer: /^\\d+$/,\n}\n\nconst validation_is_exceed_number = (input, maxDigit) => {\n    const max_digit = maxDigit || 15\n\n    if (input.length > max_digit) {\n        return false\n    }\n\n    return true\n}\n\nconst validation_is_not_zero = (input) => {\n    if (input == 0) {\n        return false\n    }\n    return true\n}\n\nconst numberValidation = (input, fieldName, maxDigit) => {\n    if (!input) {\n        return <Localize translate_text=\"{{fieldName}} is required\" values={{ fieldName }} />\n    } else if (!validation_regex.number.test(input)) {\n        return localize('Should be a valid number')\n    } else if (!validation_is_exceed_number(input, maxDigit)) {\n        return localize('Reached maximum number of digits')\n    } else if (!validation_is_not_zero(input)) {\n        return localize('Input must be greater than 0')\n    }\n\n    return null\n}\n\nconst numberWithNegativeValidation = (input, fieldName, maxDigit) => {\n    if (!input) {\n        return <Localize translate_text=\"{{fieldName}} is required\" values={{ fieldName }} />\n    } else if (!validation_regex.numberWithNegative.test(input)) {\n        return localize('Should be a valid number')\n    } else if (!validation_is_exceed_number(input, maxDigit)) {\n        return localize('Reached maximum number of digits')\n    } else if (!validation_is_not_zero(input)) {\n        return localize('Input must not be  0')\n    }\n\n    return null\n}\n\nconst validation = {\n    symbol: (input) => {\n        if (!input || input.name === 'default') {\n            return localize('Symbol is required')\n        }\n\n        return null\n    },\n    volume: (input) => {\n        return numberValidation(input, localize('Volume'), 8)\n    },\n    assetPrice: (input) => {\n        return numberValidation(input, localize('Asset price'), 15)\n    },\n    leverage: (input) => {\n        if (!input || input.display_name === '') {\n            return localize('Leverage is required')\n        }\n        return null\n    },\n    swapRate: (input) => {\n        return numberWithNegativeValidation(input, localize('Swap rate'), 15)\n    },\n\n    pointValue: (input) => {\n        return numberValidation(input, localize('Point value'), 15)\n    },\n}\n\nexport default validation\n","import React, { useState } from 'react'\nimport { Formik, Field } from 'formik'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport {\n    optionItemDefault,\n    leverageItemLists,\n    syntheticItemLists,\n    financialItemLists,\n} from './_underlying-data'\nimport {\n    StyledText,\n    StyledSection,\n    SectionHeader,\n    SectionSubtitle,\n    ContentContainer,\n    FormWrapper,\n    CalculatorForm,\n    CalculatorHeader,\n    CalculatorLabel,\n    CalculatorOutputContainer,\n    CalculatorOutputField,\n    CalculatorOutputSymbol,\n    CalculatorBody,\n    CalculatorTabItem,\n    CalculatorDropdown,\n    InputGroup,\n    ActionSection,\n    CalculateButton,\n    RightContent,\n    RightContentHeader,\n    TextWrapper,\n    ImageWrapper,\n    FormulaText,\n    StyledOl,\n    LinkWrapper,\n    BottomContent,\n    BottomText,\n    StyledLinkButton,\n} from './_style'\nimport validation from './_validation'\nimport { localize, Localize } from 'components/localization'\nimport { Flex, Show } from 'components/containers'\nimport { QueryImage, Dropdown } from 'components/elements'\nimport Input from 'components/form/input'\n\nconst MarginCalculator = () => {\n    const query = graphql`\n        query {\n            margin_formula: file(relativePath: { eq: \"trade-tools/margin-formula.png\" }) {\n                ...fadeIn\n            }\n            margin_info: file(relativePath: { eq: \"trade-tools/margin-info.png\" }) {\n                ...fadeIn\n            }\n            margin_formula_mobile: file(\n                relativePath: { eq: \"trade-tools/margin-formula-mobile.png\" }\n            ) {\n                ...fadeIn\n            }\n        }\n    `\n    const data = useStaticQuery(query)\n\n    const [tab, setTab] = useState('Synthetic')\n\n    const onTabClick = (tab) => {\n        setTab(tab)\n    }\n\n    const getMargin = (values) => {\n        const { symbol, volume, assetPrice, leverage, contractSize } = values\n        let margin_formula\n        const STEPINDEX_VALUE = 100\n        const RANGEBREAK100VALUE = 400\n        const RANGEBREAK200VALUE = 800\n\n        if (symbol.name === 'Step Index') {\n            margin_formula = volume * STEPINDEX_VALUE\n        } else if (symbol.name === 'Range Break 100 Index') {\n            margin_formula = volume * RANGEBREAK100VALUE\n        } else if (symbol.name === 'Range Break 200 Index') {\n            margin_formula = volume * RANGEBREAK200VALUE\n        } else {\n            margin_formula = (volume * contractSize * assetPrice) / leverage.name\n        }\n\n        return toFixed(margin_formula)\n    }\n\n    const toFixed = (val) => {\n        return parseFloat(val.toFixed(3)).toLocaleString()\n    }\n\n    const resetValidation = (values) => {\n        const errors = {}\n        const symbol_error = validation.symbol(values.symbol)\n        const volume_error = validation.volume(values.volume)\n        const assetPrice_error = validation.assetPrice(values.assetPrice)\n        const leverage_error = validation.leverage(values.leverage)\n\n        if (symbol_error) {\n            errors.symbol = symbol_error\n        }\n        if (volume_error) {\n            errors.volume = volume_error\n        }\n        if (assetPrice_error) {\n            errors.assetPrice = assetPrice_error\n        }\n        if (leverage_error) {\n            errors.leverage = leverage_error\n        }\n\n        return errors\n    }\n\n    const getMarginCurrency = (symbol) => {\n        let currency = 'USD'\n        if (symbol.market === 'synthetic_indices' || symbol.market === 'commodities') {\n            currency = 'USD'\n        }\n\n        if (symbol.name === 'DAX_30') {\n            currency = 'EUR'\n        }\n\n        if (symbol.market === 'forex' && symbol.name !== 'default' && symbol.name !== 'CL_BRENT') {\n            currency = symbol.display_name.slice(-3)\n        }\n\n        return currency\n    }\n\n    const getContractSize = (symbol) => {\n        let contractSize = 1\n\n        if (symbol.market === 'forex') {\n            contractSize = 100000\n        }\n\n        if (symbol.market === 'commodities') {\n            switch (symbol.name) {\n                case 'XAGUSD':\n                    contractSize = 5000\n                    break\n                case 'XAUUSD':\n                case 'XPDUSD':\n                case 'XPTUSD':\n                    contractSize = 100\n                    break\n            }\n        }\n\n        if (symbol.name === 'Step Index') {\n            contractSize = 10\n        }\n\n        return contractSize\n    }\n\n    const numberWithCommas = (input) => {\n        return input.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n    }\n\n    const numberSubmitFormat = (input) => {\n        return input.replace(/^0+(?!\\.|$)/, '')\n    }\n\n    return (\n        <StyledSection direction=\"column\">\n            <SectionHeader as=\"h2\" align=\"center\" mt=\"6rem\" mb=\"1.2rem\">\n                {localize('Margin calculator')}\n            </SectionHeader>\n\n            <SectionSubtitle as=\"h5\" align=\"center\" weight=\"normal\">\n                {localize(\n                    'Our margin calculator helps you to estimate the margin required to keep your positions open overnight on Deriv MetaTrader 5 (DMT5).',\n                )}\n            </SectionSubtitle>\n\n            <ContentContainer mb=\"4.0rem\">\n                <FormWrapper>\n                    <Formik\n                        enableReinitialize\n                        initialValues={{\n                            accountType: 'Synthetic',\n                            margin: 0,\n                            marginSymbol: 'USD',\n                            symbol: '',\n                            volume: '',\n                            assetPrice: '',\n                            leverage: '',\n                            optionList: syntheticItemLists,\n                            contractSize: '',\n                        }}\n                        validate={resetValidation}\n                        onSubmit={(values, { setFieldValue }) => {\n                            setFieldValue('margin', getMargin(values))\n                            setFieldValue('volume', numberSubmitFormat(values.volume))\n                            setFieldValue('assetPrice', numberSubmitFormat(values.assetPrice))\n                        }}\n                    >\n                        {({\n                            values,\n                            setFieldValue,\n                            setFieldError,\n                            setFieldTouched,\n                            handleBlur,\n                            errors,\n                            touched,\n                            setErrors,\n                            resetForm,\n                            isValid,\n                            dirty,\n                        }) => (\n                            <CalculatorForm>\n                                <CalculatorHeader>\n                                    <CalculatorLabel htmlFor=\"message\">\n                                        {localize('Margin required')}\n                                    </CalculatorLabel>\n                                    <CalculatorOutputContainer>\n                                        <CalculatorOutputField>\n                                            {numberWithCommas(values.margin)}\n                                        </CalculatorOutputField>\n                                        <CalculatorOutputSymbol>\n                                            {values.marginSymbol}\n                                        </CalculatorOutputSymbol>\n                                    </CalculatorOutputContainer>\n                                </CalculatorHeader>\n\n                                <CalculatorBody>\n                                    <CalculatorLabel>{localize('Account type')}</CalculatorLabel>\n                                    <Flex\n                                        mb=\"3rem\"\n                                        mt=\"1rem\"\n                                        jc=\"space-between\"\n                                        tablet={{ height: 'unset' }}\n                                    >\n                                        <CalculatorTabItem\n                                            active={tab === 'Synthetic'}\n                                            onClick={() => {\n                                                onTabClick('Synthetic')\n                                                setErrors({})\n                                                resetForm({})\n                                            }}\n                                        >\n                                            <StyledText align=\"center\">\n                                                {localize('Synthetic')}\n                                            </StyledText>\n                                        </CalculatorTabItem>\n                                        <CalculatorTabItem\n                                            active={tab === 'Financial'}\n                                            disabled={tab === 'Financial'}\n                                            onClick={() => {\n                                                onTabClick('Financial')\n                                                setErrors({})\n                                                resetForm({})\n                                                setFieldValue('accountType', 'Financial')\n                                                setFieldValue('optionList', financialItemLists)\n                                            }}\n                                        >\n                                            <StyledText align=\"center\">\n                                                {localize('Financial')}\n                                            </StyledText>\n                                        </CalculatorTabItem>\n                                    </Flex>\n\n                                    <CalculatorDropdown\n                                        option_list={values.optionList}\n                                        label={localize('Symbol')}\n                                        default_option={optionItemDefault}\n                                        selected_option={values.symbol}\n                                        id=\"symbol\"\n                                        onChange={(value) => {\n                                            setFieldValue('marginSymbol', getMarginCurrency(value))\n                                            setFieldValue('contractSize', getContractSize(value))\n                                            setFieldValue('symbol', value)\n                                        }}\n                                        error={touched.symbol && errors.symbol}\n                                        onBlur={handleBlur}\n                                        autocomplete=\"off\"\n                                        contractSize={values.contractSize}\n                                    />\n\n                                    <InputGroup>\n                                        <Field\n                                            name=\"volume\"\n                                            value={values.volume}\n                                            onChange={(value) => {\n                                                setFieldValue('volume', value)\n                                            }}\n                                        >\n                                            {({ field }) => (\n                                                <Input\n                                                    {...field}\n                                                    id=\"volume\"\n                                                    type=\"text\"\n                                                    label={localize('Volume')}\n                                                    autoComplete=\"off\"\n                                                    error={touched.volume && errors.volume}\n                                                    onBlur={handleBlur}\n                                                    handleError={(current_input) => {\n                                                        setFieldValue('volume', '', false)\n                                                        setFieldError('volume', '')\n                                                        setFieldTouched('volume', false, false)\n                                                        current_input.focus()\n                                                    }}\n                                                    maxLength=\"8\"\n                                                    background=\"white\"\n                                                />\n                                            )}\n                                        </Field>\n                                    </InputGroup>\n\n                                    <InputGroup>\n                                        <Field\n                                            name=\"assetPrice\"\n                                            value={values.assetPrice}\n                                            onChange={(value) => {\n                                                setFieldValue('assetPrice', value)\n                                            }}\n                                        >\n                                            {({ field }) => (\n                                                <Input\n                                                    {...field}\n                                                    id=\"assetPrice\"\n                                                    type=\"text\"\n                                                    label={localize('Asset price')}\n                                                    autoComplete=\"off\"\n                                                    error={touched.assetPrice && errors.assetPrice}\n                                                    onBlur={handleBlur}\n                                                    handleError={(current_input) => {\n                                                        setFieldValue('assetPrice', '', false)\n                                                        setFieldError('assetPrice', '')\n                                                        setFieldTouched('assetPrice', false, false)\n                                                        current_input.focus()\n                                                    }}\n                                                    maxLength=\"15\"\n                                                    background=\"white\"\n                                                />\n                                            )}\n                                        </Field>\n                                    </InputGroup>\n                                    <Dropdown\n                                        option_list={leverageItemLists}\n                                        id=\"leverage\"\n                                        label={localize('Leverage')}\n                                        default_option={optionItemDefault}\n                                        selected_option={values.leverage}\n                                        onChange={(value) => {\n                                            setFieldValue('leverage', value)\n                                        }}\n                                        error={touched.leverage && errors.leverage}\n                                        onBlur={handleBlur}\n                                        autoComplete=\"off\"\n                                        data-lpignore=\"true\"\n                                    />\n                                    <ActionSection>\n                                        <CalculateButton\n                                            secondary\n                                            type=\"submit\"\n                                            disabled={!isValid || !dirty}\n                                        >\n                                            {localize('Calculate')}\n                                        </CalculateButton>\n                                    </ActionSection>\n                                </CalculatorBody>\n                            </CalculatorForm>\n                        )}\n                    </Formik>\n                </FormWrapper>\n\n                <RightContent>\n                    <TextWrapper>\n                        <RightContentHeader as=\"h3\" mb=\"0.8rem\">\n                            {localize('How margin is calculated')}\n                        </RightContentHeader>\n\n                        <StyledText>\n                            <Localize translate_text=\"The margin required for a contract on DMT5 is calculated based on the formula:\" />\n                        </StyledText>\n                        <StyledText mb=\"1.6rem\">\n                            <Localize\n                                translate_text=\"<0> Margin = volume in lots × contract size × asset price/leverage </0>\"\n                                components={[<strong key={0} />]}\n                            />\n                        </StyledText>\n\n                        <StyledText mb=\"1.6rem\">\n                            <Localize translate_text=\"This gives you the margin requirement in the quote currency for forex pairs, or in the denomination of the underlying asset for other instruments.\" />\n                        </StyledText>\n                        <StyledText mb=\"2.4rem\">\n                            {localize(\n                                'For instance, if you are trading the USD/CHF forex pair, the margin requirement will be calculated in Swiss Franc (CHF) which is the quote currency. On the other hand, if you are trading Volatility Index 75,  then the margin requirement will be computed in US Dollar (USD), which is the denomination of the underlying asset – Volatility Index 75.',\n                            )}\n                        </StyledText>\n\n                        <RightContentHeader as=\"h3\" mb=\"0.8rem\">\n                            {localize('Example calculation')}\n                        </RightContentHeader>\n\n                        <StyledText mb=\"16px\">\n                            {localize(\n                                'Let’s say you want to trade two lots of EUR/USD with an asset price of 1.10 USD and leverage of 100.',\n                            )}\n                        </StyledText>\n                    </TextWrapper>\n\n                    <ImageWrapper>\n                        <Show.Desktop>\n                            <QueryImage data={data.margin_formula} alt={'Margin formula'} />\n                        </Show.Desktop>\n\n                        <Show.Mobile>\n                            <QueryImage\n                                data={data.margin_formula_mobile}\n                                alt={'Margin formula mobile'}\n                            />\n                        </Show.Mobile>\n\n                        <FormulaText>\n                            <StyledOl>\n                                <li>\n                                    <span>\n                                        <Localize translate_text=\" One standard lot of forex = 100,000 units\" />\n                                    </span>\n                                </li>\n                            </StyledOl>\n                        </FormulaText>\n                    </ImageWrapper>\n\n                    <TextWrapper>\n                        <StyledText mb=\"1.6rem\" mt=\"1.6rem\">\n                            <Localize\n                                translate_text=\"So you will require a margin rate of <0>2,200 USD</0> to open the above position.\"\n                                components={[<strong key={0} />]}\n                            />\n                        </StyledText>\n                        <StyledText>\n                            {localize(\n                                'Note that these are approximate values only and will differ depending on the leverage that is set for your account and the asset you want to trade.',\n                            )}\n                        </StyledText>\n                    </TextWrapper>\n                </RightContent>\n            </ContentContainer>\n\n            <BottomContent direction=\"column\">\n                <BottomText mb=\"2.4rem\">\n                    <Localize\n                        translate_text=\"To view the asset price, go to Deriv MetaTrader 5 (DMT5), click on the <0>View </0> tab and select<0> Market Watch</0>, then right-click on the symbol you want to trade and select <0>Specification.</0>\"\n                        components={[<strong key={0} />]}\n                    />\n                </BottomText>\n\n                <LinkWrapper>\n                    <StyledLinkButton\n                        tertiary=\"true\"\n                        to=\"https://app.deriv.com/mt5\"\n                        external=\"true\"\n                        target=\"_blank\"\n                    >\n                        {localize('Go to DMT5 dashboard')}\n                    </StyledLinkButton>\n                    <StyledLinkButton secondary=\"true\" to=\"/trade-types/margin\">\n                        {localize('Learn more about margin')}\n                    </StyledLinkButton>\n                </LinkWrapper>\n            </BottomContent>\n        </StyledSection>\n    )\n}\n\nexport default MarginCalculator\n","import React, { useState } from 'react'\nimport { Formik, Field } from 'formik'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport styled from 'styled-components'\nimport { optionItemDefault, syntheticItemLists, financialItemLists } from './_underlying-data'\nimport {\n    SwapTabSelector,\n    StyledText,\n    StyledSection,\n    SectionHeader,\n    SectionSubtitle,\n    ContentContainer,\n    SwapFormWrapper,\n    CalculatorForm,\n    CalculatorHeader,\n    CalculatorLabel,\n    CalculatorOutputContainer,\n    CalculatorOutputField,\n    CalculatorOutputSymbol,\n    CalculatorBody,\n    CalculatorDropdown,\n    InputGroup,\n    ActionSection,\n    CalculateButton,\n    RightContent,\n    RightContentHeader,\n    TextWrapper,\n    ImageWrapper,\n    FormulaText,\n    StyledOl,\n    LinkWrapper,\n    BottomContent,\n    BottomText,\n    StyledLinkButton,\n} from './_style'\nimport validation from './_validation'\nimport { localize, Localize } from 'components/localization'\nimport { QueryImage } from 'components/elements'\nimport { Flex, Show } from 'components/containers'\nimport Input from 'components/form/input'\n\nconst StyledInputGroup = styled(InputGroup)`\n    margin: 0;\n`\n\nconst StyledActionSection = styled(ActionSection)`\n    margin-top: 1.5rem;\n`\n\nconst SwapCalculator = () => {\n    const query = graphql`\n        query {\n            swap_synthetic_formula: file(\n                relativePath: { eq: \"trade-tools/swap-synthetic-formula.png\" }\n            ) {\n                ...fadeIn\n            }\n            swap_forex_formula: file(relativePath: { eq: \"trade-tools/swap-forex-formula.png\" }) {\n                ...fadeIn\n            }\n            swap_synthetic_formula_mobile: file(\n                relativePath: { eq: \"trade-tools/swap-synthetic-formula-mobile.png\" }\n            ) {\n                ...fadeIn\n            }\n            swap_forex_formula_mobile: file(\n                relativePath: { eq: \"trade-tools/swap-forex-formula-mobile.png\" }\n            ) {\n                ...fadeIn\n            }\n        }\n    `\n    const data = useStaticQuery(query)\n\n    const [tab, setTab] = useState('Synthetic')\n\n    const onTabClick = (tab) => {\n        setTab(tab)\n    }\n\n    const getSwapChargeSynthetic = (values) => {\n        const { volume, assetPrice, swapRate, contractSize, symbol } = values\n\n        let swap_formula_synthetic\n        const STEPINDEX_VALUE = 100\n        const RANGEBREAK100VALUE = 400\n        const RANGEBREAK200VALUE = 800\n\n        if (symbol.name === 'Step Index') {\n            swap_formula_synthetic = volume * STEPINDEX_VALUE\n        } else if (symbol.name === 'Range Break 100 Index') {\n            swap_formula_synthetic = volume * RANGEBREAK100VALUE\n        } else if (symbol.name === 'Range Break 200 Index') {\n            swap_formula_synthetic = volume * RANGEBREAK200VALUE\n        } else {\n            swap_formula_synthetic = (volume * contractSize * assetPrice * (swapRate / 100)) / 360\n        }\n        return toFixed(swap_formula_synthetic)\n    }\n\n    const getSwapChargeForex = (values) => {\n        const { volume, pointValue, swapRate, contractSize } = values\n        const swap_formula_forex = volume * contractSize * pointValue * swapRate\n        return toFixed(swap_formula_forex)\n    }\n\n    const toFixed = (val) => {\n        return parseFloat(val.toFixed(3)).toLocaleString()\n    }\n\n    const resetValidationSynthetic = (values) => {\n        const errors = {}\n        const symbol_error = validation.symbol(values.symbol)\n        const volume_error = validation.volume(values.volume)\n        const assetPrice_error = validation.assetPrice(values.assetPrice)\n        const swapRate_error = validation.swapRate(values.swapRate)\n\n        if (symbol_error) {\n            errors.symbol = symbol_error\n        }\n        if (volume_error) {\n            errors.volume = volume_error\n        }\n        if (assetPrice_error) {\n            errors.assetPrice = assetPrice_error\n        }\n\n        if (swapRate_error) {\n            errors.swapRate = swapRate_error\n        }\n\n        return errors\n    }\n\n    const resetValidationForex = (values) => {\n        const errors = {}\n        const symbol_error = validation.symbol(values.symbol.display_name)\n        const volume_error = validation.volume(values.volume)\n        const pointValue_error = validation.pointValue(values.pointValue)\n        const swapRate_error = validation.swapRate(values.swapRate)\n\n        if (symbol_error) {\n            errors.symbol = symbol_error\n        }\n        if (volume_error) {\n            errors.volume = volume_error\n        }\n        if (pointValue_error) {\n            errors.pointValue = pointValue_error\n        }\n\n        if (swapRate_error) {\n            errors.swapRate = swapRate_error\n        }\n\n        return errors\n    }\n\n    const getCurrencySwap = (symbol) => {\n        let currency = 'USD'\n        if (symbol.market === 'synthetic_indices' || symbol.market === 'commodities') {\n            currency = 'USD'\n        }\n\n        if (symbol.name === 'DAX_30') {\n            currency = 'EUR'\n        }\n\n        if (symbol.market === 'forex' && symbol.name !== 'default' && symbol.name !== 'CL_BRENT') {\n            currency = symbol.display_name.slice(-3)\n        }\n\n        return currency\n    }\n\n    const getContractSize = (symbol) => {\n        let contractSize = 1\n\n        if (symbol.market === 'forex') {\n            contractSize = 100000\n        }\n\n        if (symbol.market === 'commodities') {\n            switch (symbol.name) {\n                case 'XAGUSD':\n                    contractSize = 5000\n                    break\n                case 'XAUUSD':\n                case 'XPDUSD':\n                case 'XPTUSD':\n                    contractSize = 100\n                    break\n            }\n        }\n\n        if (symbol.name === 'Step Index') {\n            contractSize = 10\n        }\n\n        return contractSize\n    }\n\n    const numberWithCommas = (input) => {\n        return input.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n    }\n\n    const numberSubmitFormat = (input) => {\n        return input.replace(/^0+(?!\\.|$)/, '')\n    }\n\n    const numberSubmitFormatNegative = (input) => {\n        let result = input.replace(/^(-?)0+/, '$1')\n\n        if (result.charAt(0) == '-' && result.charAt(1) == '.') {\n            result = result.slice(0, 1) + '0' + result.slice(1)\n        } else if (result.charAt(0) == '.') {\n            result = '0' + result\n        }\n\n        return result\n    }\n\n    return (\n        <StyledSection direction=\"column\">\n            <SectionHeader as=\"h2\" align=\"center\" mt=\"8rem\" mb=\"1.2rem\">\n                {localize('Swap calculator')}\n            </SectionHeader>\n\n            <SectionSubtitle as=\"h5\" align=\"center\" mb=\"4rem\" weight=\"normal\">\n                {localize(\n                    'Our swap calculator helps you to estimate the swap charges required to keep your positions open overnight on Deriv MetaTrader 5 (DMT5).',\n                )}\n            </SectionSubtitle>\n\n            <Flex mb=\"40px\" p=\"0 1.6rem\" tablet={{ mb: '32px', height: 'unset' }}>\n                <SwapTabSelector\n                    active={tab === 'Synthetic'}\n                    onClick={() => onTabClick('Synthetic')}\n                >\n                    <StyledText size=\"var(--text-size-m)\" align=\"center\">\n                        {localize('Synthetic indices')}\n                    </StyledText>\n                </SwapTabSelector>\n                <SwapTabSelector active={tab === 'Real'} onClick={() => onTabClick('Real')}>\n                    <StyledText size=\"var(--text-size-m)\" align=\"center\">\n                        {localize('Forex and commodities')}\n                    </StyledText>\n                </SwapTabSelector>\n            </Flex>\n\n            {tab === 'Synthetic' ? (\n                <>\n                    <ContentContainer mb=\"4.0rem\">\n                        <SwapFormWrapper>\n                            <Formik\n                                enableReinitialize\n                                initialValues={{\n                                    swapCharge: 0,\n                                    swapChargeSymbol: 'USD',\n                                    symbol: '',\n                                    volume: '',\n                                    optionList: syntheticItemLists,\n                                    contractSize: '',\n                                    swapRate: '',\n                                    assetPrice: '',\n                                }}\n                                validate={resetValidationSynthetic}\n                                onSubmit={(values, { setFieldValue }) => {\n                                    setFieldValue('swapCharge', getSwapChargeSynthetic(values))\n                                    setFieldValue('volume', numberSubmitFormat(values.volume))\n                                    setFieldValue(\n                                        'swapRate',\n                                        numberSubmitFormatNegative(values.swapRate),\n                                    )\n                                    setFieldValue(\n                                        'assetPrice',\n                                        numberSubmitFormat(values.assetPrice),\n                                    )\n                                }}\n                            >\n                                {({\n                                    values,\n                                    setFieldValue,\n                                    handleBlur,\n                                    errors,\n                                    touched,\n                                    setFieldError,\n                                    setFieldTouched,\n                                    isValid,\n                                    dirty,\n                                }) => (\n                                    <CalculatorForm>\n                                        <CalculatorHeader>\n                                            <CalculatorLabel htmlFor=\"message\">\n                                                {localize('Swap charge')}\n                                            </CalculatorLabel>\n                                            <CalculatorOutputContainer>\n                                                <CalculatorOutputField>\n                                                    {numberWithCommas(values.swapCharge)}\n                                                </CalculatorOutputField>\n                                                <CalculatorOutputSymbol>\n                                                    {values.swapChargeSymbol}\n                                                </CalculatorOutputSymbol>\n                                            </CalculatorOutputContainer>\n                                        </CalculatorHeader>\n\n                                        <CalculatorBody>\n                                            <CalculatorDropdown\n                                                mb=\"2.4rem\"\n                                                option_list={values.optionList}\n                                                label={localize('Symbol')}\n                                                default_option={optionItemDefault}\n                                                selected_option={values.symbol}\n                                                id=\"symbol\"\n                                                onChange={(value) => {\n                                                    setFieldValue(\n                                                        'swapCurrency',\n                                                        getCurrencySwap(value),\n                                                    )\n\n                                                    setFieldValue(\n                                                        'contractSize',\n                                                        getContractSize(value),\n                                                    )\n                                                    setFieldValue('symbol', value)\n                                                }}\n                                                contractSize={values.contractSize}\n                                                error={touched.symbol && errors.symbol}\n                                                onBlur={handleBlur}\n                                            />\n\n                                            <InputGroup>\n                                                <Field\n                                                    name=\"volume\"\n                                                    value={values.volume}\n                                                    onChange={(value) => {\n                                                        setFieldValue('volume', value)\n                                                    }}\n                                                >\n                                                    {({ field }) => (\n                                                        <Input\n                                                            {...field}\n                                                            id=\"volume\"\n                                                            type=\"text\"\n                                                            label={localize('Volume')}\n                                                            autoComplete=\"off\"\n                                                            error={touched.volume && errors.volume}\n                                                            onBlur={handleBlur}\n                                                            data-lpignore=\"true\"\n                                                            handleError={(current_input) => {\n                                                                setFieldValue('volume', '', false)\n                                                                setFieldError('volume', '')\n                                                                setFieldTouched(\n                                                                    'volume',\n                                                                    false,\n                                                                    false,\n                                                                )\n                                                                current_input.focus()\n                                                            }}\n                                                            maxLength=\"8\"\n                                                            background=\"white\"\n                                                        />\n                                                    )}\n                                                </Field>\n                                            </InputGroup>\n\n                                            <InputGroup>\n                                                <Field\n                                                    name=\"assetPrice\"\n                                                    value={values.assetPrice}\n                                                    onChange={(value) => {\n                                                        setFieldValue('assetPrice', value)\n                                                    }}\n                                                >\n                                                    {({ field }) => (\n                                                        <Input\n                                                            {...field}\n                                                            id=\"asset\"\n                                                            type=\"text\"\n                                                            value={values.assetPrice}\n                                                            label={localize('Asset price')}\n                                                            autoComplete=\"off\"\n                                                            error={\n                                                                touched.assetPrice &&\n                                                                errors.assetPrice\n                                                            }\n                                                            onBlur={handleBlur}\n                                                            data-lpignore=\"true\"\n                                                            handleError={(current_input) => {\n                                                                setFieldValue(\n                                                                    'assetPrice',\n                                                                    '',\n                                                                    false,\n                                                                )\n                                                                setFieldError('assetPrice', '')\n                                                                setFieldTouched(\n                                                                    'assetPrice',\n                                                                    false,\n                                                                    false,\n                                                                )\n                                                                current_input.focus()\n                                                            }}\n                                                            maxLength=\"15\"\n                                                            background=\"white\"\n                                                        />\n                                                    )}\n                                                </Field>\n                                            </InputGroup>\n\n                                            <StyledInputGroup>\n                                                <Field\n                                                    name=\"swapRate\"\n                                                    value={values.swapRate}\n                                                    onChange={(value) => {\n                                                        setFieldValue('swapRate', value)\n                                                    }}\n                                                >\n                                                    {({ field }) => (\n                                                        <Input\n                                                            {...field}\n                                                            id=\"swapRate\"\n                                                            type=\"text\"\n                                                            value={values.swapRate}\n                                                            label={localize('Swap rate')}\n                                                            autoComplete=\"off\"\n                                                            error={\n                                                                touched.swapRate && errors.swapRate\n                                                            }\n                                                            onBlur={handleBlur}\n                                                            data-lpignore=\"true\"\n                                                            handleError={(current_input) => {\n                                                                setFieldValue('swapRate', '', false)\n                                                                setFieldError('swapRate', '')\n                                                                setFieldTouched(\n                                                                    'swapRate',\n                                                                    false,\n                                                                    false,\n                                                                )\n                                                                current_input.focus()\n                                                            }}\n                                                            maxLength=\"15\"\n                                                            background=\"white\"\n                                                        />\n                                                    )}\n                                                </Field>\n                                            </StyledInputGroup>\n                                            <StyledActionSection>\n                                                <CalculateButton\n                                                    secondary\n                                                    type=\"submit\"\n                                                    disabled={!isValid || !dirty}\n                                                >\n                                                    {localize('Calculate')}\n                                                </CalculateButton>\n                                            </StyledActionSection>\n                                        </CalculatorBody>\n                                    </CalculatorForm>\n                                )}\n                            </Formik>\n                        </SwapFormWrapper>\n\n                        <RightContent>\n                            <TextWrapper>\n                                <RightContentHeader as=\"h3\" mb=\"8px\">\n                                    {localize('How swap charges are calculated')}\n                                </RightContentHeader>\n\n                                <StyledText size=\"1.6rem\">\n                                    <Localize translate_text=\"For synthetic indices, the swap charge is calculated on an annual basis for long and short positions using the formula:\" />\n                                </StyledText>\n                                <StyledText size=\"1.6rem\" mb=\"2rem\">\n                                    <Localize\n                                        translate_text=\"<0>Swap charge = volume × contract size × asset price × (swap rate/100) /360</0>\"\n                                        components={[<strong key={0} />]}\n                                    />\n                                </StyledText>\n\n                                <StyledText size=\"1.6rem\" mb=\"2rem\">\n                                    <Localize translate_text=\"This gives you the swap charge in USD.\" />\n                                </StyledText>\n\n                                <RightContentHeader as=\"h3\" mb=\"0.8rem\">\n                                    {localize('Example calculation')}\n                                </RightContentHeader>\n\n                                <StyledText size=\"1.6rem\" mb=\"2rem\">\n                                    {localize(\n                                        'Let’s say you want to keep 0.01 lots of Volatility 75 Index with an asset price of 400,000 USD and swap rate of -7.5 open for one night.',\n                                    )}\n                                </StyledText>\n                            </TextWrapper>\n                            <ImageWrapper>\n                                <Show.Desktop>\n                                    <QueryImage\n                                        data={data.swap_synthetic_formula}\n                                        alt={'swap synthetic formula'}\n                                    />\n                                </Show.Desktop>\n                                <Show.Mobile>\n                                    <QueryImage\n                                        data={data.swap_synthetic_formula_mobile}\n                                        alt={'swap synthetic formula mobile'}\n                                    />\n                                </Show.Mobile>\n                                <FormulaText size=\"14px\">\n                                    <StyledOl>\n                                        <li>\n                                            <span>\n                                                <Localize translate_text=\"If the swap rate is positive, your account will be credited with the swap amount. If it is negative, your account will be debited\" />\n                                            </span>\n                                        </li>\n                                    </StyledOl>\n                                </FormulaText>\n                            </ImageWrapper>\n                            <TextWrapper>\n                                <StyledText size=\"1.6rem\" mt=\"1.6rem\">\n                                    <Localize\n                                        translate_text=\"So you will be required to pay a swap charge of <0>0.83 USD</0> to keep the position open for one night.\"\n                                        components={[<strong key={0} />]}\n                                    />\n                                </StyledText>\n                            </TextWrapper>\n                        </RightContent>\n                    </ContentContainer>\n\n                    <BottomContent direction=\"column\">\n                        <BottomText size=\"1.6rem\" mb=\"2.4rem\">\n                            <Localize\n                                translate_text=\"To view the asset price and swap rate, go to Deriv MetaTrader 5 (DMT5), click on the <0>View </0> tab and select<0> Market Watch</0>, then right-click on the symbol you want to trade and select <0>Specification.</0>\"\n                                components={[<strong key={0} />]}\n                            />\n                        </BottomText>\n\n                        <LinkWrapper>\n                            {\n                                <StyledLinkButton\n                                    tertiary=\"true\"\n                                    to=\"https://app.deriv.com/mt5\"\n                                    external=\"true\"\n                                    target=\"_blank\"\n                                >\n                                    {localize('Go to DMT5 dashboard')}\n                                </StyledLinkButton>\n                            }\n                            {\n                                <StyledLinkButton\n                                    secondary=\"true\"\n                                    to=\"/trade-types/margin#swap-policy\"\n                                >\n                                    {localize('Learn more about swaps')}\n                                </StyledLinkButton>\n                            }\n                        </LinkWrapper>\n                    </BottomContent>\n                </>\n            ) : (\n                <>\n                    <ContentContainer mb=\"2.0rem\">\n                        <SwapFormWrapper>\n                            <Formik\n                                enableReinitialize\n                                initialValues={{\n                                    swapCharge: 0,\n                                    swapChargeSymbol: 'USD',\n                                    symbol: '',\n                                    volume: '',\n                                    optionList: financialItemLists,\n                                    contractSize: '',\n                                    swapRate: '',\n                                    pointValue: '',\n                                }}\n                                validate={resetValidationForex}\n                                onSubmit={(values, { setFieldValue }) => {\n                                    setFieldValue('swapCharge', getSwapChargeForex(values))\n                                    setFieldValue('volume', numberSubmitFormat(values.volume))\n                                    setFieldValue(\n                                        'swapRate',\n                                        numberSubmitFormatNegative(values.swapRate),\n                                    )\n                                    setFieldValue(\n                                        'pointValue',\n                                        numberSubmitFormat(values.pointValue),\n                                    )\n                                }}\n                            >\n                                {({\n                                    values,\n                                    setFieldValue,\n                                    handleBlur,\n                                    errors,\n                                    touched,\n                                    isValid,\n                                    dirty,\n                                    setFieldTouched,\n                                    setFieldError,\n                                }) => (\n                                    <CalculatorForm>\n                                        <CalculatorHeader>\n                                            <CalculatorLabel htmlFor=\"message\">\n                                                {localize('Swap charge')}\n                                            </CalculatorLabel>\n                                            <CalculatorOutputContainer>\n                                                <CalculatorOutputField>\n                                                    {numberWithCommas(values.swapCharge)}\n                                                </CalculatorOutputField>\n                                                <CalculatorOutputSymbol>\n                                                    {values.swapChargeSymbol}\n                                                </CalculatorOutputSymbol>\n                                            </CalculatorOutputContainer>\n                                        </CalculatorHeader>\n\n                                        <CalculatorBody>\n                                            <CalculatorDropdown\n                                                mb=\"2.4rem\"\n                                                default_option={optionItemDefault}\n                                                option_list={values.optionList}\n                                                label={localize('Symbol')}\n                                                selected_option={values.symbol}\n                                                id=\"symbol\"\n                                                onChange={(value) => {\n                                                    setFieldValue(\n                                                        'swapCurrency',\n                                                        getCurrencySwap(value),\n                                                    )\n                                                    setFieldValue(\n                                                        'contractSize',\n                                                        getContractSize(value),\n                                                    )\n                                                    setFieldValue('symbol', value)\n                                                }}\n                                                contractSize={values.contractSize}\n                                                error={touched.symbol && errors.symbol}\n                                                onBlur={handleBlur}\n                                            />\n                                            <InputGroup>\n                                                <Field\n                                                    name=\"volume\"\n                                                    value={values.volume}\n                                                    onChange={(value) => {\n                                                        setFieldValue('volume', value)\n                                                    }}\n                                                >\n                                                    {({ field }) => (\n                                                        <Input\n                                                            {...field}\n                                                            id=\"volume\"\n                                                            type=\"text\"\n                                                            label={localize('Volume')}\n                                                            autoComplete=\"off\"\n                                                            error={touched.volume && errors.volume}\n                                                            onBlur={handleBlur}\n                                                            data-lpignore=\"true\"\n                                                            handleError={(current_input) => {\n                                                                setFieldValue('volume', '', false)\n                                                                setFieldError('volume', '')\n                                                                setFieldTouched(\n                                                                    'volume',\n                                                                    false,\n                                                                    false,\n                                                                )\n                                                                current_input.focus()\n                                                            }}\n                                                            maxLength=\"8\"\n                                                            background=\"white\"\n                                                        />\n                                                    )}\n                                                </Field>\n                                            </InputGroup>\n\n                                            <InputGroup>\n                                                <Field\n                                                    name=\"pointValue\"\n                                                    value={values.pointValue}\n                                                    onChange={(value) => {\n                                                        setFieldValue('pointValue', value)\n                                                    }}\n                                                >\n                                                    {({ field }) => (\n                                                        <Input\n                                                            {...field}\n                                                            id=\"pointValue\"\n                                                            type=\"text\"\n                                                            value={values.pointValue}\n                                                            label={localize('Point value')}\n                                                            autoComplete=\"off\"\n                                                            error={\n                                                                touched.pointValue &&\n                                                                errors.pointValue\n                                                            }\n                                                            onBlur={handleBlur}\n                                                            data-lpignore=\"true\"\n                                                            handleError={(current_input) => {\n                                                                setFieldValue(\n                                                                    'pointValue',\n                                                                    '',\n                                                                    false,\n                                                                )\n                                                                setFieldError('pointValue', '')\n                                                                setFieldTouched(\n                                                                    'pointValue',\n                                                                    false,\n                                                                    false,\n                                                                )\n                                                                current_input.focus()\n                                                            }}\n                                                            maxLength=\"15\"\n                                                            background=\"white\"\n                                                        />\n                                                    )}\n                                                </Field>\n                                            </InputGroup>\n\n                                            <StyledInputGroup>\n                                                <Field\n                                                    name=\"swapRate\"\n                                                    value={values.swapRate}\n                                                    onChange={(value) => {\n                                                        setFieldValue('swapRate', value)\n                                                    }}\n                                                >\n                                                    {({ field }) => (\n                                                        <Input\n                                                            {...field}\n                                                            id=\"swapRate\"\n                                                            type=\"text\"\n                                                            value={values.swapRate}\n                                                            label={localize('Swap rate')}\n                                                            autoComplete=\"off\"\n                                                            error={\n                                                                touched.swapRate && errors.swapRate\n                                                            }\n                                                            onBlur={handleBlur}\n                                                            data-lpignore=\"true\"\n                                                            handleError={(current_input) => {\n                                                                setFieldValue('swapRate', '', false)\n                                                                setFieldError('swapRate', '')\n                                                                setFieldTouched(\n                                                                    'swapRate',\n                                                                    false,\n                                                                    false,\n                                                                )\n                                                                current_input.focus()\n                                                            }}\n                                                            maxLength=\"15\"\n                                                            background=\"white\"\n                                                        />\n                                                    )}\n                                                </Field>\n                                            </StyledInputGroup>\n                                            <StyledActionSection>\n                                                <CalculateButton\n                                                    secondary\n                                                    type=\"submit\"\n                                                    disabled={!isValid || !dirty}\n                                                >\n                                                    {localize('Calculate')}\n                                                </CalculateButton>\n                                            </StyledActionSection>\n                                        </CalculatorBody>\n                                    </CalculatorForm>\n                                )}\n                            </Formik>\n                        </SwapFormWrapper>\n\n                        <RightContent direction=\"column\" max_width=\"69rem\">\n                            <TextWrapper>\n                                <RightContentHeader as=\"h3\" mb=\"8px\">\n                                    {localize('How swap charges are calculated')}\n                                </RightContentHeader>\n\n                                <StyledText size=\"1.6rem\">\n                                    <Localize translate_text=\"For forex and commodities, the swap charge is calculated using the formula is:\" />\n                                </StyledText>\n                                <StyledText size=\"1.6rem\" mb=\"2rem\">\n                                    <Localize\n                                        translate_text=\"<0>Swap charge = volume × contract size × point value × swap rate</0>\"\n                                        components={[<strong key={0} />]}\n                                    />\n                                </StyledText>\n\n                                <StyledText size=\"1.6rem\" mb=\"2rem\">\n                                    <Localize translate_text=\"This gives you the swap charge in the quote currency for forex pairs, or in the denomination of the underlying asset for commodities.\" />\n                                </StyledText>\n\n                                <StyledText size=\"1.6rem\" mb=\"2rem\">\n                                    <Localize translate_text=\"For instance, if you are trading the USD/JPY forex pair, the swap charge will be computed in Japanese Yen (JPY) which is the quote currency. On the other hand, if you are trading oil,  then the swap charge will be computed in US Dollar (USD), which is the denomination of the underlying asset – oil.\" />\n                                </StyledText>\n\n                                <RightContentHeader as=\"h3\" mb=\"0.8rem\">\n                                    {localize('Example calculation')}\n                                </RightContentHeader>\n\n                                <StyledText size=\"1.6rem\" mb=\"2rem\">\n                                    {localize(\n                                        'Let’s say you want to keep two lots of EUR/USD with a point value of 0.00001 and swap rate of -0.12 open for one night.',\n                                    )}\n                                </StyledText>\n                            </TextWrapper>\n                            <ImageWrapper>\n                                <Show.Desktop>\n                                    <QueryImage\n                                        data={data.swap_forex_formula}\n                                        alt={'Swap forex formula'}\n                                    />\n                                </Show.Desktop>\n                                <Show.Mobile>\n                                    <QueryImage\n                                        data={data.swap_forex_formula_mobile}\n                                        alt={'Swap forex formula mobile'}\n                                    />\n                                </Show.Mobile>\n                                <FormulaText size=\"14px\">\n                                    <StyledOl>\n                                        <li>\n                                            <span>\n                                                <Localize translate_text=\"One standard lot for Forex = 100,000 units\" />\n                                            </span>\n                                        </li>\n                                        <li>\n                                            <span>\n                                                <Localize translate_text=\"Point value is based on the current digit of the asset\" />\n                                            </span>\n                                        </li>\n                                        <li>\n                                            <span>\n                                                <Localize translate_text=\"If the swap rate is positive, your account will be credited with the swap amount. If it is negative, your account will be debited\" />\n                                            </span>\n                                        </li>\n                                    </StyledOl>\n                                </FormulaText>\n                            </ImageWrapper>\n                            <TextWrapper>\n                                <StyledText size=\"1.6rem\" mt=\"1.6rem\">\n                                    <Localize\n                                        translate_text=\"So you will be required to pay a swap charge of <0>0.24 USD</0> to keep the position open for one night.\"\n                                        components={[<strong key={0} />]}\n                                    />\n                                </StyledText>\n                            </TextWrapper>\n                        </RightContent>\n                    </ContentContainer>\n\n                    <BottomContent direction=\"column\">\n                        <BottomText mb=\"2.4rem\" mt=\"2.4rem\">\n                            <Localize\n                                translate_text=\"To view the swap rate and digits of the asset, go to Deriv MetaTrader 5 (DMT5), click on the <0>View </0> tab and select<0> Market Watch</0>, then right-click on the symbol you want to trade and select <0>Specification.</0>\"\n                                components={[<strong key={0} />]}\n                            />\n                        </BottomText>\n\n                        <BottomText mb=\"2.4rem\">\n                            <Localize translate_text=\"You can derive the point value from the current digits of the asset. Typically, if the digit is 3, then the point value will be 0.001. If the digit is 5, then the point value will be 0.00001, and so on.\" />\n                        </BottomText>\n\n                        <LinkWrapper>\n                            <StyledLinkButton\n                                tertiary=\"true\"\n                                to=\"https://app.deriv.com/mt5\"\n                                external=\"true\"\n                                target=\"_blank\"\n                            >\n                                {localize('Go to DMT5 dashboard')}\n                            </StyledLinkButton>\n                            <StyledLinkButton secondary=\"true\" to=\"/trade-types/margin#swap-policy\">\n                                {localize('Learn more about swaps')}\n                            </StyledLinkButton>\n                        </LinkWrapper>\n                    </BottomContent>\n                </>\n            )}\n        </StyledSection>\n    )\n}\n\nexport default SwapCalculator\n","import React from 'react'\nimport styled from 'styled-components'\nimport MarginCalculator from './_margin-calculator'\nimport SwapCalculator from './_swap-calculator'\nimport device from 'themes/device'\nimport { Box, Flex, Container, SEO } from 'components/containers'\nimport { Header } from 'components/elements'\nimport { localize, WithIntl } from 'components/localization'\nimport Layout from 'components/layout/layout'\nimport { getLocationHash, isBrowser, scrollTop } from 'common/utility'\nimport Patterns from 'images/common/trade-tools/trade-tools-bg.png'\n\nconst Hero = styled(Flex)`\n    height: 40rem;\n    background: var(--color-black);\n    background-image: url(${Patterns});\n    background-size: cover;\n`\nconst Separator = styled.div`\n    position: absolute;\n    width: 100%;\n    top: -2px;\n    height: 2px;\n    background-color: var(--color-grey-21);\n`\n\nconst Item = styled.div`\n    padding: 1.2rem 2.4rem;\n    border-bottom: ${(props) => props.name === props.active_tab && '2px solid var(--color-red)'};\n    cursor: pointer;\n    z-index: 10;\n\n    h4 {\n        color: var(--color-black);\n        font-weight: ${(props) => (props.name === props.active_tab ? 'bold' : 'normal')};\n    }\n    @media ${device.tabletL} {\n        padding: 1.5rem 3rem;\n\n        ${Header} {\n            font-size: 3rem;\n            width: max-content;\n        }\n    }\n    @media (max-width: 468px) {\n        ${Header} {\n            font-size: 16px;\n        }\n    }\n`\n\nconst TraderTools = () => {\n    const [active_tab, setTab] = useTabState()\n    React.useEffect(() => {\n        if (getLocationHash() === active_tab) return\n        if (getLocationHash().length === 0) {\n            setTab('marginCalculator')\n            isBrowser() && window.history.pushState(null, null, '#marginCalculator')\n        } else {\n            setTab(getLocationHash())\n        }\n        scrollTop()\n    }, [getLocationHash()])\n\n    const handleTabChange = (tab_name) => {\n        setTab(tab_name)\n        isBrowser() && window.history.pushState(null, null, `#${tab_name}`)\n    }\n\n    return (\n        <Layout>\n            <SEO\n                title={localize('Trade tools')}\n                description={localize('Swap calculator and Margin calculator')}\n            />\n            <Hero jc=\"center\" ai=\"center\">\n                <Container>\n                    <Header as=\"h1\" color=\"white\" align=\"center\">\n                        {localize('Traders’ tools')}\n                    </Header>\n                </Container>\n            </Hero>\n            <Flex pt=\"4rem\" background=\"var(--color-grey-23)\">\n                <Item\n                    onClick={() => handleTabChange('marginCalculator')}\n                    active_tab={active_tab}\n                    name=\"marginCalculator\"\n                >\n                    <Header as=\"h4\">{localize('Margin calculator')}</Header>\n                </Item>\n                <Item\n                    onClick={() => handleTabChange('swapCalculator')}\n                    active_tab={active_tab}\n                    name=\"swapCalculator\"\n                >\n                    <Header as=\"h4\">{localize('Swap calculator')}</Header>\n                </Item>\n            </Flex>\n            <Box position=\"relative\">\n                <Separator />\n                {active_tab === 'marginCalculator' && <MarginCalculator />}\n                {active_tab === 'swapCalculator' && <SwapCalculator />}\n            </Box>\n        </Layout>\n    )\n}\n\nconst useTabState = () => {\n    const [active_tab, setActiveTab] = React.useState('marginCalculator')\n    const setTab = (tab) => {\n        if (tab === active_tab) return\n        setActiveTab(tab)\n    }\n    return [active_tab, setTab]\n}\n\nexport default WithIntl()(TraderTools)\n","module.exports = __webpack_public_path__ + \"static/trade-tools-bg-0f62278819d65a961433ba926471ebd4.png\";"],"sourceRoot":""}