{"version":3,"sources":["webpack:///./src/pages/reset-password/index.js","webpack:///./src/common/validation.js"],"names":["StyledContainer","styled","Container","ButtonContainer","div","InputGroup","StyledButton","Button","resetValidation","values","errors","email_error","validation","email","trimSpaces","resetSubmission","actions","binary_socket","BinarySocketBase","init","onopen","send","JSON","stringify","verify_email","type","onmessage","msg","response","parse","data","setSubmitting","error","setStatus","message","resetForm","success","localize","close","WithIntl","margin_top","title","description","no_index","justify","align","direction","as","weight","mt","mb","initialValues","initialStatus","validate","onSubmit","handleChange","handleBlur","isSubmitting","status","noValidate","id","name","value","handleError","onChange","onBlur","autoComplete","label","background","placeholder","data-lpignore","required","color","tertiary","onClick","Login","redirectToLogin","secondary","disabled","validation_regex","input","test"],"mappings":"8FAAA,oKAaMA,EAAkBC,YAAOC,KAAV,sFAAGD,CAAH,oDAMfE,EAAkBF,IAAOG,IAAV,sFAAGH,CAAH,sBAIfI,EAAaJ,IAAOG,IAAV,iFAAGH,CAAH,uCAKVK,EAAeL,YAAOM,KAAV,mFAAGN,CAAH,2BAIZO,EAAkB,SAACC,GACrB,IAAIC,EAAS,GAEPC,EAAcC,IAAWC,MAAMC,YAAWL,EAAOI,QAMvD,OAJIF,IACAD,EAAOG,MAAQF,GAGZD,GAGLK,EAAkB,SAACN,EAAQO,GAC7B,IAAMC,EAAgBC,IAAiBC,OAEvCF,EAAcG,OAAS,WACnBH,EAAcI,KACVC,KAAKC,UAAU,CAAEC,aAAcV,YAAWL,EAAOI,OAAQY,KAAM,qBAGvER,EAAcS,UAAY,SAACC,GACvB,IAAMC,EAAWN,KAAKO,MAAMF,EAAIG,MAChCd,EAAQe,eAAc,GAClBH,EAASI,MACThB,EAAQiB,UAAU,CACdD,MAAOJ,EAASI,MAAME,WAK9BlB,EAAQmB,UAAU,CAAEtB,MAAO,KAC3BG,EAAQiB,UAAU,CACdG,QAASC,YACL,oFAGRpB,EAAcqB,WAkFPC,yBA9EO,kBAClB,kBAAC,IAAD,CAAQd,KAAK,SAASe,WAAW,KAC7B,kBAAC,IAAD,CACIC,MAAOJ,YAAS,0BAChBK,YAAaL,YACT,6HAEJM,UAAQ,IAEZ,kBAAC3C,EAAD,CAAiB4C,QAAQ,SAASC,MAAM,SAASC,UAAU,UACvD,kBAAC,IAAD,CAAQC,GAAG,KAAKtB,KAAK,aAAaoB,MAAM,UACnCR,YAAS,mBAEd,kBAAC,IAAD,CACIU,GAAG,KACHtB,KAAK,oBACLoB,MAAM,SACNG,OAAO,MACPC,GAAG,SACHC,GAAG,UAEFb,YAAS,yDAEd,kBAAC,IAAD,CACIc,cAAe,CAAEtC,MAAO,IACxBuC,cAAe,GACfC,SAAU7C,EACV8C,SAAUvC,IAET,gBACGN,EADH,EACGA,OACAC,EAFH,EAEGA,OACA6C,EAHH,EAGGA,aACAC,EAJH,EAIGA,WACAC,EALH,EAKGA,aACAtB,EANH,EAMGA,UACAuB,EAPH,EAOGA,OAPH,OASG,kBAAC,IAAD,CAAMC,YAAU,GACZ,kBAACtD,EAAD,KACI,kBAAC,IAAD,CACIuD,GAAG,QACHC,KAAK,QACL7B,MAAOtB,EAAOG,MACdiD,MAAOhD,YAAWL,EAAOI,OACzBkD,YAAa5B,EACb6B,SAAUT,EACVU,OAAQT,EACRU,aAAa,MACbzC,KAAK,OACL0C,MAAO9B,YAAS,SAChB+B,WAAW,QACXC,YAAa,mBACbC,gBAAc,OACdC,UAAQ,KAGhB,kBAAC,IAAD,CAAM1B,MAAM,SAAS2B,MAAM,OACtBd,EAAO1B,OAAS0B,EAAO1B,OAE5B,kBAAC,IAAD,CAAMa,MAAM,SAAS2B,MAAM,SACtBd,EAAOtB,SAAWsB,EAAOtB,SAE9B,kBAACjC,EAAD,KACI,kBAACG,EAAD,CAAcmE,UAAQ,EAACC,QAASC,IAAMC,gBAAiBnD,KAAK,UACvDY,YAAS,qBAEd,kBAAC/B,EAAD,CAAcuE,UAAU,OAAOC,SAAUrB,EAAchC,KAAK,UACvDY,YAAS,iC,kCC5I1C,gBAEM0C,EAAmB,CACrBlE,MAAO,qDAGLD,EAAa,CAEfC,MAAO,SAACmE,GACJ,OAAKA,EAEOD,EAAiBlE,MAAMoE,KAAKD,GAG7B,KAFA3C,YAAS,yBAFTA,YAAS,uBASbzB","file":"component---src-pages-reset-password-index-js-22ca00c9a1ff8fb6684e.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Formik, Form } from 'formik'\nimport Layout from 'components/layout/layout'\nimport { localize, WithIntl } from 'components/localization'\nimport { Container, SEO } from 'components/containers'\nimport { Header, Text } from 'components/elements'\nimport { Input, Button } from 'components/form'\nimport validation from 'common/validation'\nimport { trimSpaces } from 'common/utility'\nimport { BinarySocketBase } from 'common/websocket/socket_base'\nimport Login from 'common/login'\n\nconst StyledContainer = styled(Container)`\n    text-align: center;\n    height: 72rem;\n    padding: auto 0;\n`\n\nconst ButtonContainer = styled.div`\n    margin-top: 2rem;\n`\n\nconst InputGroup = styled.div`\n    width: 40rem;\n    margin: 0 auto 3.4rem;\n`\n\nconst StyledButton = styled(Button)`\n    margin: 0.8rem 0.4rem;\n`\n\nconst resetValidation = (values) => {\n    let errors = {}\n\n    const email_error = validation.email(trimSpaces(values.email))\n\n    if (email_error) {\n        errors.email = email_error\n    }\n\n    return errors\n}\n\nconst resetSubmission = (values, actions) => {\n    const binary_socket = BinarySocketBase.init()\n\n    binary_socket.onopen = () => {\n        binary_socket.send(\n            JSON.stringify({ verify_email: trimSpaces(values.email), type: 'reset_password' }),\n        )\n    }\n    binary_socket.onmessage = (msg) => {\n        const response = JSON.parse(msg.data)\n        actions.setSubmitting(false)\n        if (response.error) {\n            actions.setStatus({\n                error: response.error.message,\n            })\n            return\n        }\n\n        actions.resetForm({ email: '' })\n        actions.setStatus({\n            success: localize(\n                'Please check your email and click on the link provided to reset your password.',\n            ),\n        })\n        binary_socket.close()\n    }\n}\n\nconst ResetPassword = () => (\n    <Layout type=\"static\" margin_top=\"0\">\n        <SEO\n            title={localize('Reset password | Deriv')}\n            description={localize(\n                'Forgot your Deriv password? Want to reset your password? Send us your email address and weâ€™ll email you the instructions.',\n            )}\n            no_index\n        />\n        <StyledContainer justify=\"center\" align=\"center\" direction=\"column\">\n            <Header as=\"h2\" type=\"page-title\" align=\"center\">\n                {localize('Reset password')}\n            </Header>\n            <Header\n                as=\"h4\"\n                type=\"sub-section-title\"\n                align=\"center\"\n                weight=\"500\"\n                mt=\"0.5rem\"\n                mb=\"3.8rem\"\n            >\n                {localize(\"We'll email you instructions to reset your password.\")}\n            </Header>\n            <Formik\n                initialValues={{ email: '' }}\n                initialStatus={{}}\n                validate={resetValidation}\n                onSubmit={resetSubmission}\n            >\n                {({\n                    values,\n                    errors,\n                    handleChange,\n                    handleBlur,\n                    isSubmitting,\n                    resetForm,\n                    status,\n                }) => (\n                    <Form noValidate>\n                        <InputGroup>\n                            <Input\n                                id=\"email\"\n                                name=\"email\"\n                                error={errors.email}\n                                value={trimSpaces(values.email)}\n                                handleError={resetForm}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                autoComplete=\"off\"\n                                type=\"text\"\n                                label={localize('Email')}\n                                background=\"white\"\n                                placeholder={'example@mail.com'}\n                                data-lpignore=\"true\"\n                                required\n                            />\n                        </InputGroup>\n                        <Text align=\"center\" color=\"red\">\n                            {status.error && status.error}\n                        </Text>\n                        <Text align=\"center\" color=\"green\">\n                            {status.success && status.success}\n                        </Text>\n                        <ButtonContainer>\n                            <StyledButton tertiary onClick={Login.redirectToLogin} type=\"button\">\n                                {localize('Return to log in')}\n                            </StyledButton>\n                            <StyledButton secondary=\"true\" disabled={isSubmitting} type=\"submit\">\n                                {localize('Reset my password')}\n                            </StyledButton>\n                        </ButtonContainer>\n                    </Form>\n                )}\n            </Formik>\n        </StyledContainer>\n    </Layout>\n)\n\nexport default WithIntl()(ResetPassword)\n","import { localize } from 'components/localization'\n\nconst validation_regex = {\n    email: /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,63}$/,\n}\n\nconst validation = {\n    // Validation will return a string for error message\n    email: (input) => {\n        if (!input) {\n            return localize('Email is required')\n        } else if (!validation_regex.email.test(input)) {\n            return localize('Invalid email address')\n        } else {\n            return null\n        }\n    },\n}\n\nexport default validation\n"],"sourceRoot":""}